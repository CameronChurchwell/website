const path = require('path');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');

module.exports = {
    mode: 'development',
    entry: './web/typescript/index.ts',
    cache: false,
    module: {
        rules: [
            {
                test: /\.ts$/,
                use: [{
                    loader: 'blah'
                }],
                exclude: /node_modules/,
            },
        ],
    },
    // resolve: {
    //     extensions: ['.ts', '.js'],
    // },
    output: {
        // filename: 'bundle.js',
        path: path.resolve(__dirname, 'assets/build'),
    },
    // optimization: {
    //     splitChunks: {
    //         cacheGroups: {
    //             commons: {
    //                 test: /[\\/]node_modules[\\/]/,
    //                 // name(module, chunks, cacheGroupKey) {
    //                 //     const moduleFileName = module
    //                 //       .identifier()
    //                 //       .split('/')
    //                 //       .reduceRight((item) => item)
    //                 //       .split('.')
    //                 //       .reduce((item) => item);
    //                 //     const allChunksNames = chunks.map((item) => item.name).join('~');
    //                 //     return `${cacheGroupKey}-${allChunksNames}-${moduleFileName}`;
    //                 //   },
    //                   chunks: 'all',
    //             }
    //         }
    //     }
    // },
    // optimization: {
    //     splitChunks: {
    //         chunks: 'all',
    //     },
    // },
    module: {
        rules: [
            {
                test: /\.(s(a|c)ss)$/,
                use: [
                    MiniCssExtractPlugin.loader,
                    'css-loader',
                    {
                        loader: 'postcss-loader',
                        options: {
                            postcssOptions: {
                                plugins: () => {
                                    [
                                        require(autoprefixer)
                                    ];
                                }
                            }
                        }
                    },
                    {
                        loader: 'sass-loader',
                        options: {
                            sassOptions: {
                                includePaths: [
                                    path.resolve(__dirname, 'node_modules/foundation-sites/scss'),
                                    path.resolve(__dirname, 'node_modules/motion-ui/src'),
                                ]
                            }
                        }
                    }
                ]
            }
        ]
    },
    plugins: [
        new MiniCssExtractPlugin({
            filename: 'foundation_styles.min.css'
        })
    ]
}